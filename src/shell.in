#!/bin/sh

# Part of @PACKAGE_STRING@
# For bug reports, see "@PACKAGE_BUGREPORT@"

_error ()
{
    # Simple function for outputting error messages.  Prefixes the error
    # message with the name of the utility.

    # Parameters:   same as printf
    # stdin:        unused
    # stdout:       unused
    # stderr:       error message

    printf 'shell: ' >&2
    printf "$@" >&2
}

_get_solaris_shells ()
{
    # Returns a list of valid Solaris 11.3 shells.  The list is taken
    # from the shells(4) manual and is shortened to only contain one
    # single instance of each shell.

    # Parameters:   none
    # stdin:        unused
    # stdout:       list of shells (one per line)

    cat <<END_LIST
/bin/bash
/bin/csh
/bin/jsh
/bin/ksh
/bin/ksh93
/bin/pfbash
/bin/pfcsh
/bin/pfksh
/bin/pfksh93
/bin/pfsh
/bin/pftcsh
/bin/pfzsh
/bin/sh
/bin/tcsh
/bin/zsh
END_LIST
}

get_shells ()
{
    # Returns a list of installed shells.  The shells are validated
    # (it's made sure that they are executable files) before returned.

    # Rationale: OpenBSD and NetBSD can use "getent shells" to get a
    # list of shells, but this doesn't work on Ubuntu.  Solaris is a
    # problem since "getent shells" doesn't work and /etc/shells may not
    # exist.  The list of valid Solaris shells is instead taken from
    # the shells(4) manual on a vanilla Solaris 11.3 system.

    # Parameters:   none
    # stdin:        unused
    # stdout:       list of shells (one per line)

    # Try using "getent shells", if that fails, try parsing /etc/shells,
    # and if that fails, see if we're on Solaris and pass a predifined
    # list of shells.  Else fail.

    if ! getent shells 2>/dev/null &&
       ! grep '^[^#]' /etc/shells 2>/dev/null
    then
        if [ "$( uname -s )" = "SunOS" ]; then
            _get_solaris_shells
        else
            _error 'Can not get list of shells!\n'
            _error 'Please file a bug report at\n'
            _error '@PACKAGE_BUGREPORT@\n'
            exit 1
        fi
    fi |
    while read realshell; do
        if [ -x "$realshell" ]; then
            printf '%s\n' "$realshell"
        fi
    done
}

while getopts 'd:k' opt; do
    case "$opt" in
        d) tmpwd=$OPTARG
           keep=1 ;;
        k) keep=1 ;;
        *) _error 'error while parsing the command line\n'
           exit 1
    esac
done
shift "$(( OPTIND - 1 ))"

if [ -n "$1" ]; then
    shell="${1##*/}"
    shift
else
    shell="${SHELL##*/}"
fi

if [ -z "$shell" ]; then
    _error 'Can not determine what shell to start\n'
    exit 1
fi

realshell="$( get_shells | grep "/$shell\$" )"

if [ -z "$realshell" ] || [ ! -x "$realshell" ]; then
    _error 'No such shell: %s\n' "$shell"
    echo 'Valid shells:' >&2
    get_shells | awk '{ printf("\t%s\n", $0) }' >&2
    exit 1
fi

if [ -z "$tmpwd" ]; then
    tmpwd="$( mktemp -d -t "shell-$shell.XXXXXXXX" )"
elif [ ! -d "$tmpwd" ]; then
    if [ -e "$tmpwd" ]; then
        _error '"%s" exists, but is not a directory\n' "$tmpwd"
        exit 1
    fi

    if ! mkdir -p "$tmpwd"; then
        _error 'Failed to create directory "%s"\n' "$tmpwd"
        exit 1
    fi
fi

if [ "$keep" -eq 1 ]; then
    trap 'printf "Leaving %s in place\n" "$tmpwd" >&2' EXIT
else
    trap 'printf "Removing %s\n" "$tmpwd" >&2; cd / && rm -rf "$tmpwd"' EXIT
fi

printf 'Starting %s in %s\n' "$realshell" "$tmpwd" >&2

cd "$tmpwd" &&
env -i  HOME="$tmpwd" \
        PATH="$( getconf PATH )" \
        PS1='$ ' \
        SHELL="$realshell" \
        TERM="$TERM" \
        "$realshell" "$@"


# vim: ft=sh
