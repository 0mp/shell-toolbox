#!@shell_path@

# This script creates a collection of files and directories with names
# that may cause issues in scripts that are less cautiously written.
#
# Example invocations:
#
#   $ shevil testdir    # creates testdir and populates it
#   $ shevil            # creates a directory under $TMPDIR (or /tmp)
#                       # and populates it

if [[ -n "$1" ]]; then
    tmpdir="$1"
    if [[ -e "$tmpdir" ]]; then
        printf 'The name "%s" already exists here.\n' "$tmpdir" >&2
        echo 'Pick another directory name.' >&2
        exit 1
    fi
    mkdir -p "$tmpdir"
else
    tmpdir="$( @mktemp_path@ -d -p /tmp "evil.XXXXXXXX" )"
fi

printf 'Created directory "%s".\n' "$tmpdir"
echo "Remove this directory manually once it's no longer needed."

cd "$tmpdir" || exit 1

# Create files that are separate, but appear similar to each other
# because of whitespace (space, tab, newline, carriage return, backspace):
touch -- a b 'a ' 'b ' 'a b' 'a  b' $'a\bb'
touch -- a$'\xe2\x80\x82'b a$'\xe2\x80\x83'b a$'\t'b a$'\n'b a$'\r'b

# Create a plain file and one that would expand to the first if it was
# treated as a glob:
touch -- x '[x]'

# Similar to the above:
touch -- 'a?b' 'a*b'

# Starry files:
touch -- '*' '**' '***'

# To catch attempts to put a file name in quotes without escaping quotes.
touch -- -a -b -c -r -R - a=x

# Create a named pipe and symlink (to create files that aren't "regular"):
mkfifo fifo
ln -s a alink

# Dead symlink:
ln -s /does/not/exist dead

# Create subdirectories that have various whitespace included in their
# names, along with token files inside of them:
mkdir subdir 'subdir 1' 'subdir 2' 'subdir 3 ' $'subdir\n4'
touch -- subdir/file0 'subdir 1/file1' \
    'subdir 2/file2' 'subdir 3 /file3' $'subdir\n4/file4'

# misc.
touch -- 'foo`echo malicious`bar' 'foo$(echo malicious)bar'
touch -- "single'quote" 'double"quote' 'back\slash'

echo 'Done.'

# vim: ft=sh
